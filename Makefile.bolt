define newline


endef

libs_for_gpu=-L/share/apps/cuda/lib64 -lcublas -lcurand
includes_for_gpu=-I/share/apps/cuda/include
opt= -O3

ifndef BLAS
 echo -e '$(error $(newline)\
 BLAS was not defined.$(newline)\
 Define -BLAS=$(newline)\
              atlas-sandybridge-gnu$(newline)\
              atlas-haswell-gnu$(newline)\
              atlas-dev-sandybridge-gnu$(newline)\
              atlas-dev-haswell-gnu$(newline)\
              openBLAS-sandybridge-gnu$(newline)\
              openBLAS-haswell-gnu$(newline)\
              mkl$(newline)\
              mkl-with-cuda$(newline)\
))'
endif

ifneq (,$(findstring atlas,$(BLAS)))
 BLASNAME=atlas
endif

ifneq (,$(findstring openBLAS,$(BLAS)))
 BLASNAME=openBLAS
endif

ifneq (,$(findstring mkl,$(BLAS)))
 BLASNAME=$(BLAS)
endif

ifndef BLAS
 $(error Unknown BLAS selection)
else
 $(info BLAS=$(BLAS))
 $(info BLASNAME=$(BLASNAME))
endif

ifeq ($(BLASNAME),atlas)
  opt= -O3
	libs_for_blas=-L/share/apps/share/blas/$(BLAS)/lib -lptcblas -latlas -lpthread
	includes_for_blas=-I/share/apps/share/blas/$(BLAS)/include
endif

ifeq ($(BLASNAME),openBLAS)
  opt= -O3
	libs_for_blas=-L/share/apps/share/blas/$(BLAS)/build/lib -lopenblas -lpthread
	includes_for_blas=-I/share/apps/share/blas/$(BLAS)/build/include
endif

ifeq ($(BLASNAME),mkl-with-cuda)
  opt= -O3 -DMKL
	libs_for_blas=${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a -ldl -lpthread -lm
	includes_for_blas= -DMKL_ILP64 -Xcompiler -fopenmp -m64 -I${MKLROOT}/include
endif

ifeq ($(BLASNAME),mkl)
  opt= -O3 -DMKL
	libs_for_blas= -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_ilp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a -Wl,--end-group -ldl -lpthread -lm
	includes_for_blas= -DMKL_ILP64 -fopenmp -m64 -I${MKLROOT}/include
endif

all:
	nvcc $(opt) $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

debug:
	nvcc -DDEBUG $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

cpu-dgemm:
	nvcc $(opt) -DCPU_DGEMM $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

verify:
	nvcc $(opt) -DCPU_DGEMM $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

debug-verify:
	nvcc -DDEBUG -DCPU_DGEMM -DVERIFY $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

pinned:
	nvcc $(opt) -DPINNED $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

debug-pinned:
	nvcc -DPINNED -DDEBUG $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

cpu-dgemm-pinned:
	nvcc $(opt) -DPINNED -DCPU_DGEMM $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

verify-pinned:
	nvcc $(opt) -DPINNED -DCPU_DGEMM -DVERIFY $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

debug-verify-pinned:
	nvcc -DPINNED -DDEBUG -DCPU_DGEMM -DVERIFY $(includes_for_gpu) $(includes_for_blas) dgemm.c $(libs_for_gpu) $(libs_for_blas) -o dgemm.$(BLAS).x

no-gpu:
	$(CC) $(opt) -DNOGPU $(includes_for_blas) -lm dgemm.c $(libs_for_blas) -o dgemm.$(BLAS).x
